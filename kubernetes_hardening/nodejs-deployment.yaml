apiVersion: v1
kind: Service
metadata:
  name: nodejs-service
  labels:
    app: nodejs
spec:
  ports:
    - port: 80
      targetPort: 3000
  selector:
    app: nodejs
  # Use LoadBalancer for external access or ClusterIP for internal-only
  type: LoadBalancer 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodejs-app-deployment
  labels:
    app: nodejs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nodejs
  template:
    metadata:
      labels:
        app: nodejs
        role: frontend # Label for NetworkPolicy
    spec:
      # Enforce non-root containers (SecurityContext)
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001 # Choose a non-root user ID
        fsGroup: 1001
      containers:
        - name: nodejs-app
          image: ritiklinux/node-frontend:v1.1
          ports:
            - containerPort: 3000
          env:
            # Construct the MongoDB URI using the service name and secrets
            - name: MONGO_HOST
              value: "mongodb-service.default.svc.cluster.local"
            - name: MONGO_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: MONGO_INITDB_ROOT_USERNAME
            - name: MONGO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: MONGO_INITDB_ROOT_PASSWORD
            - name: MONGO_DATABASE
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: MONGO_DATABASE
          # Define resource limits/requests
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "300m"
          # Liveness and Readiness Probes (Crucial for stability)
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 15
            periodSeconds: 20
          # Runtime security with Seccomp
          securityContext:
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
